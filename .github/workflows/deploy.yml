name: Deploy Service

on:
  workflow_call:
    inputs:
      service-name:
        description: "Name of the service to deploy"
        required: true
        type: string
      env:
        description: "Environment (dev/staging/prod)"
        required: true
        type: string
      image-tag:
        description: "Docker image tag to deploy"
        required: true
        type: string

jobs:
  update-deployment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          repository: Parspec/parspec-ai-ci-common
          path: ci-cd-workflows-repo
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update image tag in deployment file
        run: |
            set -e
            cd ci-cd-workflows-repo
  
            # Find the deployments dir
            if [ -d "deployment" ]; then
              DEPLOY_DIR="deployment"
            elif [ -d ".deployment" ]; then
              DEPLOY_DIR=".deployment"
            else
              echo "‚ùå Neither 'deployment' nor '.deployment' exists in $(pwd)"
              ls -la
              exit 1
            fi
  
            DEPLOY_FILE="$DEPLOY_DIR/${{ inputs.service-name }}-${{ inputs.env }}.yml"
            [ -f "$DEPLOY_FILE" ] || { echo "‚ùå Missing $DEPLOY_FILE"; exit 1; }
            [ -n "${{ inputs.image-tag }}" ] || { echo "‚ùå image-tag is empty"; exit 1; }
  
            echo "üîé Updating: $DEPLOY_FILE to tag '${{ inputs.image-tag }}'"
  
            # Install yq (safer than sed for YAML)
            sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.1/yq_linux_amd64
            sudo chmod +x /usr/local/bin/yq
  
            # Read current image (adjust container index or name if needed)
            CUR_IMAGE=$(yq '.spec.template.spec.containers[0].image' "$DEPLOY_FILE")
            [ -n "$CUR_IMAGE" ] || { echo "‚ùå Could not read current image from YAML"; exit 1; }
  
            # Split into repo and tag. If the current image has no ':', assume 'latest'.
            if [[ "$CUR_IMAGE" == *:* ]]; then
              BASE="${CUR_IMAGE%:*}"
            else
              BASE="$CUR_IMAGE"
            fi
  
            NEW_IMAGE="${BASE}:${{ inputs.image-tag }}"
            echo "üñäÔ∏è  $CUR_IMAGE  ->  $NEW_IMAGE"
  
            # If already up to date, do nothing (let next step exit successfully)
            if [ "$CUR_IMAGE" = "$NEW_IMAGE" ]; then
              echo "‚ÑπÔ∏è Image already at desired tag, no change needed."
              echo "NO_CHANGE=1" >> $GITHUB_ENV
              exit 0
            fi
  
            # Write new image back
            yq -i '.spec.template.spec.containers[0].image = "'"$NEW_IMAGE"'"' "$DEPLOY_FILE"
  
            echo "üîÅ Diff:"
            git --no-pager diff -- "$DEPLOY_FILE" || true
  

      - name: Commit and push changes
        run: |
              cd ci-cd-workflows-repo
    
              # If previous step set NO_CHANGE, skip committing
              if [ "${NO_CHANGE:-}" = "1" ]; then
                echo "‚úÖ Nothing to commit (already up to date)."
                exit 0
              fi
    
              # Only commit if there are actual changes
              if git diff --quiet --exit-code -- $DEPLOY_DIR/${{ inputs.service-name }}-${{ inputs.env }}.yml; then
                echo "‚ÑπÔ∏è No changes detected."
                exit 0
              fi
    
              git config user.name "github-actions[bot]"
              git config user.email "github-actions[bot]@users.noreply.github.com"
              git add $DEPLOY_DIR/${{ inputs.service-name }}-${{ inputs.env }}.yml
              git commit -m "chore: deploy ${{ inputs.service-name }} to ${{ inputs.env }} @ ${{ inputs.image-tag }} [skip ci]"
              git push origin main
    
