name: Deploy Service

on:
  workflow_call:
    inputs:
      service-name:
        description: "Name of the service to deploy"
        required: true
        type: string
      env:
        description: "Environment (dev/staging/prod)"
        required: true
        type: string
      image-tag:
        description: "Docker image tag to deploy"
        required: true
        type: string

jobs:
  update-deployment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          repository: Parspec/parspec-ai-ci-common
          path: ci-cd-workflows-repo
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update image tag in deployment file
        id: update
        run: |
          set -euo pipefail
          cd ci-cd-workflows-repo

          # Locate deployments dir
          if [ -d "deployment" ]; then
            DEPLOY_DIR="deployment"
          elif [ -d ".deployment" ]; then
            DEPLOY_DIR=".deployment"
          else
            echo "❌ Neither 'deployment' nor '.deployment' exists in $(pwd)"
            ls -la
            exit 1
          fi

          DEPLOY_FILE="$DEPLOY_DIR/${{ inputs.service-name }}-${{ inputs.env }}.yml"
          [ -f "$DEPLOY_FILE" ] || { echo "❌ Missing $DEPLOY_FILE"; exit 1; }

          NEW_TAG="${{ inputs.image-tag }}"
          [ -n "$NEW_TAG" ] || { echo "❌ image-tag is empty"; exit 1; }

          # Install yq
          sudo wget -qO /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/v4.44.1/yq_linux_amd64"
          sudo chmod +x /usr/local/bin/yq

          CUR_IMAGE=$(yq 'select(.kind == "Deployment") | .spec.template.spec.containers[0].image' "$DEPLOY_FILE")
          if [ -z "$CUR_IMAGE" ] || [ "$CUR_IMAGE" = "null" ]; then
            echo "❌ Could not read current image from the Deployment doc"
            exit 1
          fi

          if [[ "$CUR_IMAGE" == *:* ]]; then
            BASE="${CUR_IMAGE%:*}"
          else
            BASE="$CUR_IMAGE"
          fi

          export NEW_IMAGE="${BASE}:${NEW_TAG}"
          echo "🔎 File: $DEPLOY_FILE"
          echo "OLD: $CUR_IMAGE"
          echo "NEW: $NEW_IMAGE"

          if [ "$CUR_IMAGE" = "$NEW_IMAGE" ]; then
            echo "NO_CHANGE=1" >> $GITHUB_ENV
            echo "DEPLOY_DIR=$DEPLOY_DIR"   >> $GITHUB_ENV
            echo "DEPLOY_FILE=$DEPLOY_FILE" >> $GITHUB_ENV
            exit 0
          fi

          # Replace image only inside Deployment spec
          yq -i '(. | select(.kind == "Deployment")).spec.template.spec.containers[0].image = strenv(NEW_IMAGE)' "$DEPLOY_FILE"

          echo "🔁 Diff:"
          git --no-pager diff -- "$DEPLOY_FILE" || true

          # Export vars for next step
          echo "DEPLOY_DIR=$DEPLOY_DIR"   >> $GITHUB_ENV
          echo "DEPLOY_FILE=$DEPLOY_FILE" >> $GITHUB_ENV
          echo "NEW_TAG=$NEW_TAG"         >> $GITHUB_ENV

      - name: Commit and push changes
        run: |
          cd ci-cd-workflows-repo

          if [ "${NO_CHANGE:-}" = "1" ]; then
            echo "✅ Nothing to commit (already up to date)."
            exit 0
          fi

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add "$DEPLOY_FILE"
          git commit -m "chore: deploy ${{ inputs.service-name }} to ${{ inputs.env }} @ ${{ inputs.image-tag }} [skip ci]"
          git push origin main
