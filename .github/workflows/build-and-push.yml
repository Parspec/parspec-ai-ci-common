name: Docker Build & Push to ECR

on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
      build-context:
        required: true
        type: string

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Caller Code
        uses: actions/checkout@v4
        with:
          path: caller-repo

      - name: Checkout Central Dockerfiles
        uses: actions/checkout@v4
        with:
          repository: Harshit-Parspec/ci-workflow
          path: ci-cd-workflows-repo

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch Service Environment Variables from Secrets Manager
        id: get-env-vars
        run: |
          SECRET_NAME="${{ inputs.service-name }}"
          SECRET_JSON=$(aws secretsmanager get-secret-value \
            --secret-id "$SECRET_NAME" \
            --query SecretString \
            --output text \
            --region us-east-2 || echo "")

          if [ -z "$SECRET_JSON" ]; then
            echo "::warning::No secret found for $SECRET_NAME"
            echo "BUILD_ARGS_STRING=" >> $GITHUB_ENV
          else
            BUILD_ARGS_STRING=$(echo "$SECRET_JSON" | jq -r 'to_entries[] | "--build-arg \(.key)=\(.value)"' | tr '\n' ' ')
            echo "BUILD_ARGS_STRING=$BUILD_ARGS_STRING" >> $GITHUB_ENV
          fi

      - name: Build, Tag, and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          FULL_ECR_REPOSITORY: ${{ inputs.service-name }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "ðŸ”¨ Building image for $FULL_ECR_REPOSITORY ..."
          
          docker build \
            -t $ECR_REGISTRY/$FULL_ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$FULL_ECR_REPOSITORY:latest \
            -f ./ci-cd-workflows-repo/docker-templates/Dockerfile \
            ${BUILD_ARGS_STRING} \
            ./caller-repo/${{ inputs.build-context }}

          echo "ðŸš€ Pushing image to ECR..."
          docker push $ECR_REGISTRY/$FULL_ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$FULL_ECR_REPOSITORY:latest
