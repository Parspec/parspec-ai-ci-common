name: Docker Build & Push to ECR

on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
      build-context:
        required: true
        type: string
      env:
        required: false
        type: string
        description: "Environment name (e.g., dev/prod). Used for secret suffix."
        default: "dev"
      target:
        required: true
        type: string
        description: "AWS account target: ai-dev | ai-inference"
      image-tag:
        required: false
        type: string
        description: "Docker image tag (SHA/semver). 'latest', 'dev', 'main' are treated as mutable."
        default: "latest"  # NOTE: expressions not allowed in workflow_call defaults
    
    secrets:
      ACCESS_TOKEN:
        required: false
    
    outputs:
      image-tag:
        description: "The image tag used"
        value: ${{ jobs.build-and-push.outputs.image-tag }}
      image-uri:
        description: "Full ECR image URI"
        value: ${{ jobs.build-and-push.outputs.image-uri }}
      built:
        description: "true if we built/pushed; false if we reused existing"
        value: ${{ jobs.build-and-push.outputs.built }}

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.finalize.outputs.tag }}
      image-uri:  ${{ steps.finalize.outputs.uri }}
      built:      ${{ steps.finalize.outputs.built }}

    steps:
      - name: "Resolve target to account/role/region/registry"
        id: tgt
        shell: bash
        run: |
          set -euo pipefail
          case "${{ inputs.target }}" in
            ai-dev)
              AWS_ACCOUNT_ID=227410688064
              AWS_REGION=us-east-2
              ROLE_ARN=arn:aws:iam::227410688064:role/GitHubActionsDeployRole
              ;;
            ai-inference)
              AWS_ACCOUNT_ID=783952637912
              AWS_REGION=us-east-2
              ROLE_ARN=arn:aws:iam::783952637912:role/GitHubActionsDeployRole
              ;;
            *)
              echo "Unsupported target: ${{ inputs.target }}" >&2
              exit 1
              ;;
          esac

          ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"

          {
            echo "AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}"
            echo "AWS_REGION=${AWS_REGION}"
            echo "ROLE_ARN=${ROLE_ARN}"
            echo "ECR_REGISTRY=${ECR_REGISTRY}"
          } >> "$GITHUB_OUTPUT"

      - name: "Configure AWS credentials (OIDC)"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.tgt.outputs.ROLE_ARN }}
          aws-region:     ${{ steps.tgt.outputs.AWS_REGION }}
          role-session-name: gha-${{ github.run_id }}
          audience: sts.amazonaws.com

      - name: "Verify AWS identity"
        run: aws sts get-caller-identity

      - name: "Login to Amazon ECR"
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ steps.tgt.outputs.AWS_ACCOUNT_ID }}

      - name: "Ensure ECR repo and check image tag"
        id: ecr_check
        env:
          AWS_REGION:  ${{ steps.tgt.outputs.AWS_REGION }}
          REPOSITORY:  ${{ inputs.service-name }}
          TAG:         ${{ inputs.image-tag }}
        run: |
          set -euo pipefail

          # 1) Ensure repo exists (create if missing)
          REPO_URI="$(aws ecr describe-repositories \
            --repository-names "$REPOSITORY" \
            --region "$AWS_REGION" \
            --query 'repositories[0].repositoryUri' \
            --output text 2>/dev/null || true)"
          if [ -z "$REPO_URI" ] || [ "$REPO_URI" = "None" ]; then
            echo "Creating ECR repo: $REPOSITORY"
            REPO_URI="$(aws ecr create-repository \
              --repository-name "$REPOSITORY" \
              --image-scanning-configuration scanOnPush=true \
              --region "$AWS_REGION" \
              --query 'repository.repositoryUri' \
              --output text)"
          else
            echo "ECR repo exists: $REPO_URI"
          fi
          echo "repository-uri=$REPO_URI" >> "$GITHUB_OUTPUT"

          # 2) Mutable tags â†’ always rebuild
          case "$TAG" in
            latest|dev|main)
              echo "exists=false" >> "$GITHUB_OUTPUT"
              exit 0
              ;;
          esac

          # 3) Check if the specific image:tag already exists
          if aws ecr describe-images \
              --repository-name "$REPOSITORY" \
              --image-ids imageTag="$TAG" \
              --region "$AWS_REGION" >/dev/null 2>&1; then
            echo "exists=true"  >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: "Checkout caller repository"
        if: ${{ steps.ecr_check.outputs.exists != 'true' }}
        uses: actions/checkout@v4
        with:
          path: caller-repo

      - name: "Checkout central Dockerfiles"
        if: ${{ steps.ecr_check.outputs.exists != 'true' }}
        uses: actions/checkout@v4
        with:
          repository: Parspec/parspec-ai-ci-common
          ref: main
          path: ci-cd-workflows-repo

      - name: "Install jq"
        if: ${{ steps.ecr_check.outputs.exists != 'true' }}
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: "Fetch build args from AWS Secrets Manager"
        if: ${{ steps.ecr_check.outputs.exists != 'true' }}
        id: get_env
        env:
          AWS_REGION:  ${{ steps.tgt.outputs.AWS_REGION }}
          SECRET_NAME: ${{ inputs.service-name }}-${{ inputs.env }}
        run: |
          set -euo pipefail
          SECRET_JSON=$(aws secretsmanager get-secret-value \
            --secret-id "$SECRET_NAME" \
            --query SecretString \
            --output text \
            --region "$AWS_REGION" || echo "")
          if [ -z "$SECRET_JSON" ]; then
            echo "::notice title=Secrets::No secret found for $SECRET_NAME"
            echo "BUILD_ARGS_STRING=" >> $GITHUB_ENV
          else
            BUILD_ARGS_STRING=$(echo "$SECRET_JSON" | jq -r 'to_entries[] | "--build-arg \(.key)=\(.value)"' | tr '\n' ' ')
            echo "BUILD_ARGS_STRING=$BUILD_ARGS_STRING" >> $GITHUB_ENV
          fi

      - name: "Copy shared package (optional)"
        if: ${{ steps.ecr_check.outputs.exists != 'true' }}
        run: |
          cp -r ./caller-repo/shared ./caller-repo/${{ inputs.build-context }}/ || true

      - name: "Compute APP_MODULE (FastAPI heuristic)"
        if: ${{ steps.ecr_check.outputs.exists != 'true' }}
        id: appmod
        run: |
          SERVICE_UNDER="$(echo '${{ inputs.service-name }}' | sed 's/-/_/g; s/_service$//')"
          APP_MODULE="fastapi_${SERVICE_UNDER}:app"
          if [ -f "./caller-repo/${{ inputs.build-context }}/src/main.py" ]; then
            APP_MODULE="src.main:app"
          fi
          echo "APP_MODULE=$APP_MODULE" >> $GITHUB_ENV
          echo "app_module=$APP_MODULE"  >> $GITHUB_OUTPUT

      - name: "Build and push image"
        if: ${{ steps.ecr_check.outputs.exists != 'true' }}
        env:
          ECR_REGISTRY: ${{ steps.tgt.outputs.ECR_REGISTRY }}
          REPOSITORY:   ${{ inputs.service-name }}
          IMAGE_TAG:    ${{ inputs.image-tag }}
        run: |
          set -euo pipefail
          docker build \
            -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$REPOSITORY:latest \
            -f ./ci-cd-workflows-repo/docker-templates/Dockerfile \
            ${BUILD_ARGS_STRING} \
            --build-arg APP_MODULE="$APP_MODULE" \
            --build-arg GITHUB_TOKEN="${{ secrets.ACCESS_TOKEN }}" \
            ./caller-repo/${{ inputs.build-context }}
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: "Finalize outputs"
        id: finalize
        env:
          ECR_REGISTRY: ${{ steps.tgt.outputs.ECR_REGISTRY }}
          REPOSITORY:   ${{ inputs.service-name }}
          TAG:          ${{ inputs.image-tag }}
          EXISTS:       ${{ steps.ecr_check.outputs.exists }}
        run: |
          set -euo pipefail
          URI="${ECR_REGISTRY}/${REPOSITORY}:${TAG}"
          echo "tag=${TAG}"   >> "$GITHUB_OUTPUT"
          echo "uri=${URI}"   >> "$GITHUB_OUTPUT"
          if [ "${EXISTS}" = "true" ]; then
            echo "built=false" >> "$GITHUB_OUTPUT"
          else
            echo "built=true"  >> "$GITHUB_OUTPUT"
          fi
