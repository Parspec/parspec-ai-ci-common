name: Docker Build & Push to ECR

on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
        description: 'The unique name of the service'
      dockerfile-path:
        required: true
        type: string
        description: 'Relative path to the Dockerfile to use'
      build-context:
        required: true
        type: string
        description: 'Relative path to the build context directory'
    # No secrets required - this workflow uses its own repository secrets

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Fetch Service Environment Variables from Secrets Manager
        id: get-env-vars
        run: |
          SECRET_NAME="${{ inputs.service-name }}-env-vars"
          SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id "$SECRET_NAME" --query SecretString --output text --region ${{ secrets.AWS_REGION }})
          
          if [ -z "$SECRET_JSON" ]; then
            echo "::warning::No secret found. Continuing without environment variables."
            echo "BUILD_ARGS_STRING=" >> $GITHUB_ENV
          else
            BUILD_ARGS_STRING=$(echo "$SECRET_JSON" | jq -r 'to_entries[] | "--build-arg \(.key)=\"\(.value)\""' | tr '\n' ' ')
            echo "BUILD_ARGS_STRING=$BUILD_ARGS_STRING" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Build, Tag, and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          FULL_ECR_REPOSITORY: ${{ inputs.service-name }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
            -t $ECR_REGISTRY/$FULL_ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$FULL_ECR_REPOSITORY:latest \
            -f ${{ inputs.dockerfile-path }} \
            ${{ env.BUILD_ARGS_STRING }} \
            ${{ inputs.build-context }}

          docker push $ECR_REGISTRY/$FULL_ECR_REPOSITORY --all-tags