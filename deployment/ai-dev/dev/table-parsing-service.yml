apiVersion: apps/v1
kind: Deployment
metadata:
  generation: 2
  labels:
    environment: dev
  managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:environment: {}
        f:spec:
          f:minReadySeconds: {}
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
            f:spec:
              f:containers:
                k:{"name":"table-parsing-dev"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"DEPLOYMENT_ENV"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:ephemeral-storage: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:ephemeral-storage: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
      manager: kubectl-client-side-apply
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:template:
            f:spec:
              f:containers:
                k:{"name":"table-parsing-dev"}:
                  f:image: {}
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
  name: table-parsing-service-dev
  namespace: default
spec:
  minReadySeconds: 60
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: table-parsing-dev
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: table-parsing-dev
    spec:
      serviceAccountName: table-parsing-dev-sa
      containers:
        - env:
            - name: DEPLOYMENT_ENV
              value: staging
          image: 227410688064.dkr.ecr.us-east-2.amazonaws.com/table-parsing-service:9799293a87f5b38dee3572d6693617615c20ca6c
          imagePullPolicy: IfNotPresent
          name: table-parsing-dev
          ports:
            - containerPort: 8080
              name: server-port
              protocol: TCP
          resources:
            limits:
              cpu: "8"
              ephemeral-storage: 10Gi
              memory: "8Gi"
            requests:
              cpu: "4"
              ephemeral-storage: 10Gi
              memory: "4Gi"
          securityContext:
            capabilities:
              drop:
                - NET_RAW
          volumeMounts:
            - name: logs
              mountPath: /app/app-logs
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
           # --- Fluent Bit sidecar container ---
        - name: fluent-bit
          image: 379889217383.dkr.ecr.us-east-2.amazonaws.com/fluent-bit-custom:v24
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: "0.25"
              memory: "512Mi"
            requests:
              cpu: "0.1"
              memory: "256Mi"
          env:
            - name: AWS_REGION
              value: us-east-2
          volumeMounts:
            - name: logs
              mountPath: /app/app-logs
              readOnly: true
            - name: fluent-bit-info
              mountPath: /fluent-bit/info
            - name: fluent-db
              mountPath: /app/tmp
            - name: fluent-logs
              mountPath: /var/log/os-responses
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      terminationGracePeriodSeconds: 30
      volumes:
        - name: logs
          emptyDir: {}
        - name: fluent-bit-info
          emptyDir: {}
        - name: fluent-db
          emptyDir: {}
        - name: fluent-logs
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    loadBalancerClass: service.k8s.aws/nlb
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
    service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
    service.beta.kubernetes.io/aws-load-balancer-type: external
    service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: map-migrated=migACLXAPHP5O
  finalizers:
    - service.kubernetes.io/load-balancer-cleanup
  managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
        f:spec:
          f:allocateLoadBalancerNodePorts: {}
          f:externalTrafficPolicy: {}
          f:internalTrafficPolicy: {}
          f:ports:
            .: {}
            k:{"port":80,"protocol":"TCP"}:
              .: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl-client-side-apply
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:finalizers:
            .: {}
            v:"service.kubernetes.io/load-balancer-cleanup": {}
        f:status:
          f:loadBalancer:
            f:ingress: {}
      manager: cloud-controller-manager
  name: table-parsing-dev-service
  namespace: default
spec:
  allocateLoadBalancerNodePorts: true
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - port: 80
      protocol: TCP
      targetPort: 8080
  selector:
    app: table-parsing-dev
  sessionAffinity: None
  type: LoadBalancer
  loadBalancerClass: eks.amazonaws.com/nlb
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: table-parsing-dev-sa
  namespace: default
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::783952637912:role/table-parsing-irsa-role
